/*
Name: 				Bipin Shrestha
Project Name: 		CSC450-CT1-Module7
Project Purpose:    To create basic C++ concurrency multi-threaded application that implements two counters,
					one counts up to 20 and other count 20 to 0.
Algorithm Used:		Program utilizes two threads to execute the counting task concurrently.
					Each thread iterates through a loop to perform the counting operation,
					and synchronization is achieved using 'mutexes' to ensure thread safety.
Program Inputs:		Program doesn't require any user inputs, the parameter of range of counting the number of threads
 	 	 	 	 	is predefined within the source code.
Program Outputs:	Program output the count values generated by each thread.
Program Limitations:Program has fixed counting range and it's error handling mechanism is basic and may not adequately
					handle all possible runtime errors or exceptions.
Program Errors:		The threads may not execute in the intended sequence if it is not synchronized properly.

====================================
*/

#include <iostream>
#include <thread>
#include <mutex>
#include <string>

// Mutex for synchronization
std::mutex mtx;
// Function to count up to 20
void countUp(){
	for(int i = 1; i <= 20; i++){
		// Lock the mutex
		std::lock_guard<std::mutex> lock(mtx);
		std::cout << "Counting up : " << i << std::endl;
	}
}
// Function to count down from 20 to 0
void countDown() {
	for(int i = 20; i >= 0; i--){
		// Lock the mutex
		std::lock_guard<std::mutex> lock(mtx);
		std::cout << "Counting down : " << i << std::endl;
	}
}

int main(){
	// Create two threads, one to count up and another to count down
	std::thread t1(countUp);
	std::thread t2(countDown);
	// Threads to finish execution
	t1.join();
	t2.join();

	return 0;
}
